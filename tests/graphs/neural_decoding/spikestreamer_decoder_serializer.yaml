processors:
    source:
        class: SpikeStreamer
        options:
            path_to_spikes: repo://tests/processors/spikestreamer/test_spike_amplitudes.npy
            path_to_spike_times: repo://tests/processors/spikestreamer/test_spike_times.npy
            path_to_initial_times: repo://tests/processors/spikestreamer/test_starting_times.npy
            n_channels: 4
            buffer_size_ms: 2.5
            sample_rate: 32000
            streaming_rate: 1000

    processor:
        class: Decoder
        options:
            time_bin_ms: 10.0
            strict_time_bin_check: true
            path_to_grid: repo://tests/processors/decoder/encoding_model_and_grid/grid.npy
            use_offline_model: true
            path_to_offline_model: repo://tests/processors/decoder/encoding_model_and_grid/
            path_to_test_spikes: repo://tests/processors/spikestreamer/test_spike_amplitudes.npy
    
    sink1:
        class: FileSerializer
        options:
            encoding: yaml           # either yaml or binary
            format: full          # one of none, full, streamheader, headeronly, compact
            throttle: false           # whether or not packets should be dropped if we cannot keep up

    sink2:
        class: FileSerializer
        options:
            encoding: binary           # either yaml or binary
            format: compact          # one of none, full, streamheader, headeronly, compact
            throttle: false           # whether or not packets should be dropped if we cannot keep up

connections:
    - source.spikes.0=processor.spikes
    - processor.estimates=sink2.data
    - source.spikes.0=sink1.data
    


