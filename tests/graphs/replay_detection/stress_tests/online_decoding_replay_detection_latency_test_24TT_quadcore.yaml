processors:
    source:
        class: NlxPureReader
        options:
            address: 192.168.3.99 # room A 192.168.3.99, room B 192.168.3.100
            port: 26090
            roundtrip_latency_test: false

    parser:
        class: NlxParser
        options:
            batch_size: 2
            gaps_filling: "asap"
            update_interval: 15
            hardware_trigger: true
            hardware_trigger_channel: 16 # discarded if hardware_trigger is false

    dispatcher1:
        class: Dispatcher
        options: 
            channelmap:
                tt1: [0, 1, 2, 3]
                tt2: [4, 5, 6, 7]
                tt3: [8, 9, 10, 11]
                tt4: [12, 13, 14, 15]
                tt5: [16, 17, 18, 19]
                tt6: [20, 21, 22, 23]
                tt7: [24, 25, 26, 27]
                tt8: [28, 29, 30, 31]

    dispatcher2:
        class: Dispatcher
        options: 
            channelmap:
                tt9: [32, 33, 34, 35]
                tt10: [36, 37, 38, 39]
                tt11: [40, 41, 42, 43]
                tt12: [44, 45, 46, 47]
                tt13: [48, 49, 50, 51]
                tt14: [52, 53, 54, 55]
                tt15: [56, 57, 58, 59]
                tt16: [60, 61, 62, 63]

    dispatcher3:
        class: Dispatcher
        options: 
            channelmap:
                tt17: [64, 65, 66, 67]
                tt18: [68, 69, 70, 71]
                tt19: [72, 73, 74, 75]
                tt20: [76, 77, 78, 79]
                tt21: [80, 81, 82, 83]
                tt22: [84, 85, 86, 87]
                tt23: [88, 89, 90, 91]
                tt24: [92, 93, 94, 95]

    filter(1-24):
        class: MultiChannelFilter
        options:
            filter:
                file: repo://tests/filters/iir_spike/bessel_spike.filter

    spikedetector(1-24):
        class: SpikeDetector
        options:
            threshold: 200.0
            peak_lifetime: 10
            buffer_size: 1.25      # amount of data that will be used to look for spikes [ms]

    neuraldecoder(1-24):
        class: Decoder
        options:
            use_offline_model: true   
            time_bin_ms: 10      
            path_to_offline_model: repo://tests/data/3_ram/24_08_2017/modified/encodingmodel_precomputations/TT # (folder name will auto-completed) must contain lambda_x.npy, mixture_pax.dat, pix.npy, mu.npy, offset.npy
            path_to_grid: repo://tests/data/3_ram/24_08_2017/modified/encodingmodel_precomputations/environment/grid.npy
            path_to_test_spikes: repo://tests/data/3_ram/24_08_2017/modified/test_spikes/TT

    synchronizer:
        class: LikelihoodSync
        options:
            time_bin_ms: 10 

    behavior_estimator:
        class: BehaviorEstimator
        options:
            time_bin_ms: 200
            path_to_grid: repo://tests/data/3_ram/24_08_2017/modified/encodingmodel_precomputations/environment/grid.npy
            grid_unit: "pixel"

    replayidentifier:
        class: ReplayIdentifier
        options:
            path_to_environment: repo://tests/data/3_ram/24_08_2017/modified/encodingmodel_precomputations/environment # must be a path containing grid.npy and content_nodes.npy
            path_to_mua_file: repo://tests/data/3_ram/24_08_2017/modified/encodingmodel_precomputations/mua/mua.npy
            min_MUA_std: 2.5
            half_integration_window: 6
            min_peakiness: 0.5
            min_peakiness_history_avg: 0.5
            max_2nd_derivative: 1000
            nan_aware: true
            update_interval: 1000 # how many time bins in between two updates; if negative, no update
            latency_test: true
            interval_test_events: 10
            save_intermediate_values: false

    sink:
        class: DigitalOutput
        options:
            device:
                type: advantech # dummy or advantech
                port: 0
                delay: 10
            enabled: true
            pulse_width: 400
            enable_saving : true
            lockout_period: 0 # [ms]
            protocols:
                test_replay:
                    pulse: [0]
            roundtrip_latency_test: false

    sink_behavior:
        class: FileSerializer
        options:
            encoding: binary           # either yaml or binary
            format: none          # one of none, full, streamheader, headeronly, compact

    
connections:
    - source.udp=parser.udp
    - parser.data=dispatcher(1-3).data
    - dispatcher1.tt(1-8)=filter(1-8).data
    - dispatcher2.tt(9-16)=filter(9-16).data
    - dispatcher3.tt(17-24)=filter(17-24).data
    - filter(1-24).data=spikedetector(1-24).data
    - spikedetector(1-24).spikes=neuraldecoder(1-24).spikes
    - neuraldecoder(1-24).estimates=s:(0-23).p:estimates.f:synchronizer
    - synchronizer.estimates=replayidentifier.estimates
    - synchronizer.estimates=behavior_estimator.estimates
    - replayidentifier.events=sink.events
    - behavior_estimator.behavior=sink_behavior.data

states:
    - [source.n_invalid, parser.n_invalid]

